// Generated by CoffeeScript 1.4.0
(function() {
  var BigNum, Crypto, bytesToHex, createMultiSig, decodeHex, encodeBase58, hash, hexToBytes, strToBytes, strToHex;

  Crypto = require('crypto');

  BigNum = require('bignum');

  hash = function(algo, data) {
    return Crypto.createHash(algo).update(data).digest("binary");
  };

  decodeHex = function(hex) {
    var char, hexchars, val, _i, _len;
    val = BigNum('0');
    hexchars = "0123456789ABCDEF";
    hex = hex.toUpperCase();
    for (_i = 0, _len = hex.length; _i < _len; _i++) {
      char = hex[_i];
      val = val.mul(16).add(hexchars.indexOf(char));
    }
    return val;
  };

  encodeBase58 = function(hex) {
    var base58Val, base58chars, div, index, intVal, orighex, rem;
    base58chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    if (hex.length % 2 !== 0) {
      throw "encodeBase58: uneven number of hex characters";
    }
    orighex = hex;
    intVal = decodeHex(hex);
    base58Val = "";
    while (intVal.gt(0)) {
      div = intVal.div(58);
      rem = intVal.mod(58);
      intVal = div;
      base58Val += base58chars.charAt(rem);
    }
    base58Val = base58Val.split("").reverse().join("");
    index = 0;
    while (index < orighex.length && orighex.substr(index, 2) === "00") {
      base58Val = "1" + base58Val;
      index += 2;
    }
    return base58Val;
  };

  strToBytes = function(str) {
    var bytes, chr, _i, _len;
    bytes = [];
    for (_i = 0, _len = str.length; _i < _len; _i++) {
      chr = str[_i];
      bytes.push(chr.charCodeAt(0));
    }
    return bytes;
  };

  bytesToHex = function(bytes) {
    var byte, chr, hex, _i, _len;
    hex = '';
    for (_i = 0, _len = bytes.length; _i < _len; _i++) {
      byte = bytes[_i];
      chr = byte.toString(16);
      if (chr.length < 2) {
        hex += '0' + chr;
      } else {
        hex += chr;
      }
    }
    return hex;
  };

  hexToBytes = function(hex) {
    var bytes, i, _i, _ref;
    bytes = [];
    for (i = _i = 0, _ref = hex.length - 1; _i <= _ref; i = _i += 2) {
      bytes.push(parseInt(hex.substr(i, 2), 16));
    }
    return bytes;
  };

  strToHex = function(str) {
    return bytesToHex(strToBytes(str));
  };

  createMultiSig = function(nReq, keys) {
    var addressHex, addressStart, b, bpk, checksum, key, rs, _i, _j, _len, _len1;
    if (nReq >= 2 && nReq <= 16) {
      rs = [0x50 + nReq];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        bpk = hexToBytes(key);
        rs.push(bpk.length);
        for (_j = 0, _len1 = bpk.length; _j < _len1; _j++) {
          b = bpk[_j];
          rs.push(b);
        }
      }
      rs.push(0x50 + keys.length);
      rs.push(0xAE);
      addressStart = "\x05" + hash("ripemd160", hash("sha256", String.fromCharCode.apply(String, rs)));
      checksum = hash("sha256", hash("sha256", addressStart)).substr(0, 4);
      addressHex = strToHex(addressStart + checksum);
      return {
        redeemScript: bytesToHex(rs),
        address: encodeBase58(addressHex)
      };
    }
  };

}).call(this);
